type ArrayIterator<T, TResult> = (value: T, index?: number, collection?: T[]) => TResult;

export const forEach = <T>(array: T[], iteratee?: ArrayIterator<T, any>) =>
	[...array].forEach((val, index) => {
		iteratee?.(val, index, array)
	});

export const forEachRight = <T>(array: T[], iteratee?: ArrayIterator<T, any>) =>
	[...array].reverse().forEach((val, index) => {
		iteratee?.(val, array.length - 1 - index, array)
	});

export const zip = <T1, T2>(arr1: T1[], arr2: T2[]): [T1, T2][] =>
	arr1.map((value, idx) => [value, arr2[idx]]);

export const tail = <T>(arr: T[]): T[] => arr.slice(1);
